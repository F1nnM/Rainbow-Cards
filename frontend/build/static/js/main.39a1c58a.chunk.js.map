{"version":3,"sources":["components/Header.js","components/Card.js","components/CardArea.js","components/Scoreboard.js","components/Game.js","components/MainMenu.js","components/GamesList.js","components/CreateGame.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","href","React","Component","Card","text","this","props","replace","type","chosen","onClick","onclick","trust","dangerouslySetInnerHTML","__html","children","style","mark","CardArea","blackCard","content","enablePlayedCards","playedCards","map","card","index","Fragment","trustPlayedCards","_","playedCardsClicked","chosenByCzar","sidebar","blocker","whiteCards","whiteCardClicked","Scoreboard","console","log","players","player","name","isOwner","score","connected","left","Game","sessionId","roomId","room","state","game","id","location","search","length","substring","localStorage","getItem","me","setItem","setRoom","onStateChange","once","gameState","setState","onLeave","code","joinGame","onError","message","alert","removeItem","history","client","reconnect","then","joinedGame","catch","e","match","clearGameAfterError","setTimeout","joinById","removeAllListeners","leave","send","blackCardChildren","blackcardText","winner","gameRunning","startGame","blackcard","cardsPlayed","isCzar","czarsTurn","czarDidVote","cards","playCard","czarVote","Array","from","values","withRouter","MainMenu","push","joinPrivate","prompt","value","onChange","target","GamesList","rooms","getAvailableRooms","window","reload","fontSize","openGame","clients","maxClients","metadata","CreateGame","sets","currentTotalWhite","currentTotalBlack","maxPlayers","private","pointsNeeded","fetch","response","json","data","set","checked","black","white","selectedSets","create","error","newTotalBlack","newTotalWhite","newSets","warnCards","Object","entries","toggleSelection","min","max","parseInt","App","Colyseus","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39a1c58a.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nexport class Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <span>Yet another <a href=\"https://cardsagainsthumanity.com/\">Cards against Humanity</a> clone.</span>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './Card.css'\n\nexport class Card extends React.Component {\n\n  render() {\n    let text = this.props.text? this.props.text.replace('[[BLANK]]', '________'):null\n    return (\n      <button className={`card aspect-ratio-box ${this.props.type} ${this.props.chosen ? 'chosen' : ''}`} onClick={this.props.onclick}>\n        <div className='aspect-ratio-box-inner'>\n          {this.props.text && this.props.trust && <span dangerouslySetInnerHTML={{__html: text}}></span>}\n          {this.props.text && this.props.trust || <span>{text}</span>}\n          {this.props.children && (\n            <div style={this.props.style}>\n              {this.props.children}\n            </div>\n          )}\n          {this.props.mark &&\n          <div className=\"mark\">\n            <span>{this.props.mark}</span>\n          </div>\n        }\n        </div>\n      </button>\n    );\n  }\n}","import React from 'react';\nimport { Card } from './Card';\nimport './CardArea.css'\n\nexport class CardArea extends React.Component {\n\n  render() {\n    return (\n      <div className='cardArea'>\n        <div className='tableArea'>\n          <div className='blackCardContainer'>\n            <Card trust={true} type='black' text={this.props.blackCard.content} mark={this.props.blackCard.mark}>\n              {this.props.blackCard.children}\n            </Card>\n          </div>\n          <div className={'playedCardArea '+(this.props.enablePlayedCards?'':'blocked')}>\n            {this.props.playedCards && this.props.playedCards.map((card, index) => {\n              return (\n                <React.Fragment>\n                  <Card trust={this.props.trustPlayedCards} type='white' text={card.content} mark={card.mark} onclick={_ => this.props.playedCardsClicked(index)} key={card.content + \"\" + index} chosen={card.chosenByCzar} />\n                </React.Fragment>\n              )\n            })}\n          </div>\n          {\n            this.props.sidebar &&\n            <div className='sidebarContainer'>\n              <div className='sidebarContent'>\n                {this.props.sidebar}\n              </div>\n            </div>\n          }\n        </div>\n\n        <div className='whiteCardContainer'>\n          {this.props.blocker &&\n            <div className=\"czarContainer\">\n              <div className=\"czarBackdrop\">\n                <span className=\"czarPrompt\">{this.props.blocker}</span>\n              </div>\n            </div>\n          }\n          {this.props.whiteCards && this.props.whiteCards.map((card, index) => {\n            return <Card trust={true} type='white' text={card.content} mark={card.mark} onclick={_ => this.props.whiteCardClicked(index)} key={card.content + \"\" + index} />\n          })}\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\n\n\nimport './Scoreboard.css'\nexport default class Scoreboard extends React.Component {\n\n  render() {\n      console.log(this.props.players)\n    return (\n      <div className=\"scoreboard\">\n          {this.props.players.map((player, index) => {\n              return (\n              <div className=\"player\" key={player.name+index}>{player.name}{player.isOwner?\" (Owner)\": \"\"}: {player.score} {!player.connected?player.left?'(Left)':'(Disconnected)':''}</div>\n              )\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { CardArea } from \"./CardArea\";\nimport Scoreboard from './Scoreboard';\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n    if (props.room) {\n      console.log(\"Room was supplied by props\")\n      this.state = { game: null, sessionId: props.room.sessionId, room: props.room, roomId: props.room.id}\n    }else {\n      let sessionId;\n      let roomId;\n      if (this.props.location.search.length === 10)\n        roomId = this.props.location.search.substring(1)\n      else {\n        sessionId = localStorage.getItem('sessionId')\n        roomId = localStorage.getItem('roomId')\n      }\n      this.state = { game: null, sessionId: sessionId, room: null, roomId: roomId}\n    }\n    \n  }\n\n  joinedGame(me, room){\n\n    localStorage.setItem('roomId', room.id)\n    localStorage.setItem('sessionId', room.sessionId)\n    this.props.setRoom(room)\n\n    room.onStateChange.once((gameState) => me.setState({ ...me.state, game: gameState }));\n\n    room.onStateChange((gameState) => me.setState({ ...me.state, game: gameState }));\n\n    room.onLeave((code) => {\n      console.log(\"client left the room, code: \" + code);\n      this.joinGame()\n    });\n\n    room.onError((code, message) => {\n      alert(\"ROOM ERROR (\"+code+\"):\\n\"+message)\n      console.log(code)\n      console.log(message);\n    });\n  }\n\n  clearGameAfterError() {\n    localStorage.removeItem('sessionId')\n    localStorage.removeItem('roomId')\n    this.props.setRoom(null)\n    this.props.history.replace(\"/\")\n  }\n\n  joinGame(me = this) {\n    console.log(\"joining init\")\n    if (!me.state.roomId)\n      me.clearGameAfterError()\n    else if (me.state.sessionId) {\n      console.log(\"reconnecting\")\n\n      me.props.client.reconnect(me.state.roomId, me.state.sessionId).then(room => {\n        console.log(room.sessionId, \"joined\", room.name);\n        me.joinedGame(me, room)\n      }).catch(e => {\n        if ( e.message.match(/room \"[^\"]*\" not found/gi)){\n          alert(\"Couldn't find the selected room!\")\n          me.clearGameAfterError()\n        } else if(e.message.match(/room \"[^\"]*\" not found/gi)){\n          alert(\"Your game session for this room has expired!\")\n          me.clearGameAfterError()\n        }\n        else{\n          console.log(e.message)\n          alert(\"RECONNECT Error, see console for details. Retrying in 10 seconds.\")\n          setTimeout(_ => me.joinGame(this), 10_000)\n        }\n      });\n\n    } else {\n      console.log(\"new connection\")\n\n      this.props.client.joinById(this.state.roomId, {name: localStorage.getItem(\"name\")}).then(room => {\n        console.log(room.sessionId, \"joined\", room.name);\n        this.joinedGame(this, room)\n      }).catch(e => {\n        alert(\"GAME JOIN ERROR, see console for details.\")\n        this.clearGameAfterError()\n      });\n\n    }\n  }\n\n  componentDidUpdate(){\n    console.log(\"Updated Game\")\n  }\n\n  componentDidMount() {\n    if(this.props.room)\n      this.joinedGame(this, this.props.room)\n    else\n      this.joinGame()\n  }\n\n  componentWillUnmount() {\n    console.log(\"Unmounting\")\n    if (this.props.room){\n      this.props.room.removeAllListeners()\n      this.props.room.leave()\n      this.props.setRoom(null)\n    }\n  }\n\n  startGame() {\n    this.props.room.send(\"startGame\")\n  }\n\n  playCard(me, index) {\n    me.props.room.send(\"playCard\", { index: index })\n  }\n\n  czarVote(me, index) {\n    me.props.room.send(\"czarVote\", { index: index })\n  }\n\n  render() {\n    if (!this.props.room || !this.state.game)\n      return <div></div>\n    let player = this.state.game.players[this.props.room.sessionId];\n\n    let blackcardText = this.state.game.winner? 'And the winner is [[BLANK]]' : this.state.game.blackCard.content || \"Invite players with the code: \" + this.state.roomId\n    let blackCardChildren;\n    if (player.isOwner && !this.state.game.gameRunning && !this.state.game.winner)\n      blackCardChildren = <button onClick={_ => this.startGame()}>Start Game</button>\n    let blackcard = { content: blackcardText, children: blackCardChildren }\n\n    let playedCards = this.state.game.winner ? [{content: this.state.game.players[this.state.game.winner].name, mark: \"WIN\", chosenByCzar: true}]: this.state.game.cardsPlayed\n    return (\n      \n      <CardArea\n        blocker={this.state.game.winner?'Game over':player.isCzar?\"You are the czar!\":this.state.game.czarsTurn?\"It's the czars turn to vote\":null}\n        enablePlayedCards={player.isCzar && !this.state.game.czarDidVote}\n        blackCard={blackcard}\n        whiteCards={player.cards}\n        whiteCardClicked={ index => this.playCard(this, index)}\n        playedCards={playedCards}\n        playedCardsClicked={index => this.czarVote(this, index)}\n        sidebar={<Scoreboard players={Array.from(this.state.game.players.values())}/>}\n        trustPlayedCards={!this.state.game.winner}/>\n    );\n  }\n}\n\nexport default withRouter(Game)","import React from 'react';\nimport { CardArea } from \"./CardArea\";\nimport { withRouter } from \"react-router-dom\";\n\nclass MainMenu extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { name: localStorage.getItem(\"name\") || \"Anonymous\"};\n  }\n\n  whiteCardClicked(me, index){\n    switch (index){\n      case 0:\n        me.props.history.push(\"/public_games\");\n        break;\n      case 1:\n        this.joinPrivate()\n        me.props.history.push(\"/game\");\n        break;\n      case 2:\n        me.props.history.push(\"/create\");\n        break;\n      case 3:\n        me.props.history.push(\"/game\");\n        break;\n      default:\n        break;\n    }\n  }\n\n  joinPrivate(){\n    let roomId = prompt(\"Enter the game code:\")\n    if (!roomId || roomId.length !== 9){\n      alert(\"Invalid code! A valid one is 9 characters long\")\n      return;\n    }\n    if (roomId !== localStorage.getItem(\"roomId\")){\n      localStorage.setItem(\"roomId\", roomId);\n      localStorage.removeItem(\"sessionId\");\n    }\n  }\n\n  render() {\n\n    let whiteCards = [{content: \"Join a public game\"}, {content: \"Join a private game\"}, {content: \"Create a new game\"}]\n    if (localStorage.getItem(\"roomId\"))\n      whiteCards.push({content: \"Rejoin the last game (might be closed already)\"})\n\n    let sidebar = (\n      <div>\n        <span>Set your name:</span>\n        <input value={this.state.name} onChange={e => {this.setState({...this.state, name: e.target.value})}}/><button onClick={_=>localStorage.setItem(\"name\", this.state.name)}>Set</button>\n      </div>\n    )\n\n    return (\n      <CardArea sidebar={sidebar} blackCard={{content: \"I'd like to [[BLANK]]\"}} whiteCards={whiteCards} whiteCardClicked={index => this.whiteCardClicked(this, index)} />\n    );\n  }\n}\n\nexport default withRouter(MainMenu)","import React from 'react';\nimport { withRouter } from 'react-router';\nimport { Card } from './Card';\n\nimport './GamesList.css'\nclass GamesList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {rooms: []}\n  }\n\n  componentDidMount(){\n    this.props.client.getAvailableRooms().then(rooms => {\n      this.setState({rooms: rooms})\n    }).catch(e => {\n      console.log(e)\n      alert(\"Error! Check console for details.\")\n    })\n  }\n\n  openGame(roomId){\n    if(localStorage.getItem(\"roomId\") !== roomId){\n      localStorage.removeItem(\"sessionId\");\n      localStorage.setItem(\"roomId\", roomId);\n    }\n    this.props.history.push(\"/game\");\n  }\n\n  render() {\n    return (\n      <div className=\"games-list\">\n        <button className=\"refresh-button\" onClick={_=>window.location.reload()}>Refresh</button>\n        <div>\n          {this.state.rooms.map(room => {\n            return (\n              <Card type=\"white\" style={{fontSize: \"smaller\"}} key={room.roomId} onclick={_=>{this.openGame(room.roomId)}}> \n                <span>{room.roomId}</span>\n                <hr/>\n                <span>Players:</span>\n                <span>{room.clients} / {room.maxClients || \"Inf\"}</span>\n                <span>{room.metadata}</span>\n              </Card>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(GamesList)","import React from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport './CreateGame.css'\n\nclass CreateGame extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { sets: [], currentTotalWhite: 0, currentTotalBlack: 0, maxPlayers: 10, private: false, pointsNeeded: 10 }\n  }\n\n  componentDidMount() {\n    fetch('http://dellfinnlin.fritz.box:2567/getCards')\n      .then(response => response.json())\n      .then(data => {\n        let currentTotalWhite = 0;\n        let currentTotalBlack = 0;\n        for (let set in data) {\n          if (data[set].checked) {\n            currentTotalBlack += data[set].black;\n            currentTotalWhite += data[set].white;\n          }\n        }\n        this.setState({ ...this.state, sets: data, currentTotalWhite, currentTotalBlack})\n      });\n  }\n\n  onclick(me) {\n    let selectedSets = []\n    for (let set in this.state.sets){\n      if (this.state.sets[set].checked)\n        selectedSets.push(set)\n    }\n    this.props.client.create('game', {maxPlayers: this.state.maxPlayers, pointsNeeded: this.state.pointsNeeded, sets: selectedSets, private: this.state.private, name: localStorage.getItem(\"name\")}).then(room => {\n      console.log(room.sessionId, \"joined\", room.name);\n      me.props.setRoom(room)\n      me.props.history.push(\"/game\")\n    }).catch(error => {\n      alert(\"Error! See console for details.\")\n      console.log(error)\n    });\n  }\n\n  toggleSelection(me, set) {\n    let newSets = this.state.sets\n    let newTotalBlack\n    let newTotalWhite\n    if (newSets[set].checked) {\n      newSets[set].checked = false\n      newTotalBlack = this.state.currentTotalBlack - newSets[set].black\n      newTotalWhite = this.state.currentTotalWhite - newSets[set].white\n    } else {\n      newSets[set].checked = true\n      newTotalBlack = this.state.currentTotalBlack + newSets[set].black\n      newTotalWhite = this.state.currentTotalWhite + newSets[set].white\n    }\n    this.setState({ ...this.state, sets: newSets, currentTotalBlack: newTotalBlack, currentTotalWhite: newTotalWhite })\n  }\n\n  render() {\n    let warnCards = this.state.currentTotalBlack<20 || this.state.currentTotalWhite<200\n    return (\n      <div>\n        <div className=\"options\">\n          <h2>Sets to use</h2>\n          <div className=\"checkboxContainer\">\n            {Object.entries(this.state.sets).map(([set, metadata]) => {\n              return (\n                <div className=\"checkboxWithLabel\" key={set}>\n                  <input type=\"checkbox\" checked={metadata.checked} onChange={e => this.toggleSelection(this, set)} />\n                  <label>{set}</label>\n                </div>)\n            })}\n          </div>\n        </div>\n        <div className={`options ${warnCards ? 'warn': ''}`}>\n          <span>Current number of cards: Black: {this.state.currentTotalBlack} White: {this.state.currentTotalWhite}</span>\n          {warnCards && <span>We recommend playing with at least 20 black and 200 white cards!</span>}\n        </div>\n        <div className=\"options\">\n          <label>Max. number of players:</label>\n          <input type=\"number\" min=\"3\" max=\"50\" value={this.state.maxPlayers} onChange={e => this.setState({...this.state, maxPlayers: parseInt(e.target.value)})}/>\n        </div>\n        <div className=\"options\">\n          <label>Points needed to win: </label>\n          <input type=\"number\" min=\"1\" max=\"50\" value={this.state.pointsNeeded} onChange={e => this.setState({...this.state, pointsNeeded: parseInt(e.target.value)})}/>\n        </div>\n        <div className=\"options\">\n          <label>Make this game private: </label>\n          <input type=\"checkbox\" checked={this.state.private} onChange={e => this.setState({...this.state, private: e.target.checked})}/>\n        </div>\n        <button onClick={_ => this.onclick(this)} className=\"start-button\">Start Game</button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(CreateGame)","import React from 'react'\nimport { Header } from \"./components/Header\";\nimport Game from \"./components/Game\";\nimport MainMenu from \"./components/MainMenu\";\nimport GamesList from \"./components/GamesList\";\nimport CreateGame from './components/CreateGame';\nimport {\n  Switch,\n  Route,\n  withRouter\n} from \"react-router-dom\";\nimport './App.css';\n\nimport * as Colyseus from 'colyseus.js'\nclass App extends React.Component{\n\n  constructor(props){\n    super(props)\n    this.state = {client: new Colyseus.Client('ws://dellfinnlin.fritz.box:2567'), room: null}\n  }\n\n  setRoom(me, room) {\n    me.setState({...me.state, room})\n    console.log(\"Updated room\")\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route path=\"/create\">\n            <CreateGame client={this.state.client} setRoom={(room) => this.setRoom(this, room)}/>\n          </Route>\n          <Route path=\"/game\">\n            <Game client={this.state.client} room={this.state.room} setRoom={(room) => this.setRoom(this, room)}/>\n          </Route>\n          <Route path=\"/public_games\">\n            <GamesList client={this.state.client}/>\n          </Route>\n          <Route path=\"/\">\n            <MainMenu />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n  \n}\n\nexport default  withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log());\n"],"sourceRoot":""}